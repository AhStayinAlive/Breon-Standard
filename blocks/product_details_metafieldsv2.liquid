{% comment %}
  PRODUCT METAFIELD CAROUSEL - ENHANCED:
  Dynamic card count based on actual metafield content
  Proper hover effects with visible overflow
  Media type detection for mixed image/video files
  Full theme editor control with live preview
  Smart content matching between text and media arrays
  UPDATED: Uses metaobjects for About and After Sales sections
  LOCKED: Card and video card design hardcoded (no editor controls)
  FIXED: All Theme Editor controls now reflect properly in live preview
  FIXED: About section media retrieval, After Sales navigation, removed How It Works arrows
{% endcomment %}

{% assign carousel_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .product-metafield-carousel-{{ carousel_id }} {
    --page-bg: {{ block.settings.background_color | default: '#000000' }};
    --card-bg: {{ block.settings.card_background | default: '#111111' }};
    --media-bg: {{ block.settings.media_background | default: '#1a1a1a' }};
    --text: {{ block.settings.text_color | default: '#ffffff' }};
    --muted: {{ block.settings.muted_text_color | default: '#999999' }};
    --border: {{ block.settings.border_color | default: '#ffffff' | color_modify: 'alpha', 0.10 }};
    --focus: {{ block.settings.focus_color | default: '#ffffff' }};
    --radius: {{ block.settings.border_radius | default: 20 }}px;
    
    /* Liquid-glass design tokens */
    --lg-blur: 18px;
    --lg-saturate: 180%;
    --lg-border: hsla(0,0%,100%,.22);
    --lg-shadow: rgba(0,0,0,.25);

    /* Theme editor controlled paddings */
    --pt: {{ block.settings.section_padding_top | default: 80 }}px;
    --pb: {{ block.settings.section_padding_bottom | default: 80 }}px;

    display: block;
    width: 100%;
    background: var(--page-bg);
    background: linear-gradient(180deg, var(--page-bg) 0%, {{ block.settings.background_color | default: '#000000' | color_darken: 5 }} 100%);
    color: var(--text);
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
    letter-spacing: -0.01em;
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    overflow: visible;
    position: relative;
    padding-top: var(--pt);
    padding-bottom: var(--pb);
  }
  
  /* Ensure parent sections allow overflow for hover expansion */
  .shopify-section:has(.product-metafield-carousel-{{ carousel_id }}) {
    overflow: visible;
  }

  .product-metafield-carousel-{{ carousel_id }}::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      135deg,
      var(--page-bg) 0%,
      {{ block.settings.background_color | default: '#000000' | color_darken: 8 | color_modify: 'alpha', 0.98 }} 50%,
      {{ block.settings.background_color | default: '#000000' | color_darken: 3 | color_modify: 'alpha', 0.95 }} 100%
    );
    z-index: 1;
    pointer-events: none;
  }

  .carousel-container-{{ carousel_id }} {
    width: 100%;
    margin: 0 auto;
    padding: 0 20px;
    position: relative;
    z-index: 2;
  }

  .carousel-section-{{ carousel_id }} {
    padding: {{ block.settings.section_inner_spacing | default: 40 }}px 0;
    border-bottom: 1px solid var(--border);
  }

  .carousel-section-{{ carousel_id }}:last-child {
    border-bottom: none;
  }

  .section-title-{{ carousel_id }} {
    color: var(--text);
    font-size: clamp({{ block.settings.heading_size | default: 36 | minus: 8 }}px, 4vw, {{ block.settings.heading_size | default: 36 }}px);
    font-weight: 700;
    text-align: center;
    margin: 0 0 {{ block.settings.heading_spacing | default: 60 }}px;
    letter-spacing: -0.02em;
    line-height: 1.1;
    position: relative;
  }

  .section-title-{{ carousel_id }}::after {
    content: '';
    position: absolute;
    bottom: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--text), transparent);
    opacity: 0.8;
  }

  /* HORIZONTAL CAROUSEL STYLES */
  .horizontal-carousel-{{ carousel_id }} {
    position: relative;
    overflow: visible;
    margin: 0;
    padding: 12px 0 40px;
  }

  .carousel-track-container-{{ carousel_id }} {
    position: relative;
    overflow: visible;
    margin: 0 60px;
    border-radius: var(--radius);
  }

  .carousel-track-{{ carousel_id }} {
    display: flex;
    gap: 16px;
    transition: transform 0.6s cubic-bezier(0.16, 1, 0.3, 1);
    will-change: transform;
    padding: 0 20px;
  }

  /* LOCKED CARD DESIGN */
  .carousel-card-{{ carousel_id }} {
    flex: 0 0 auto;
    width: {{ block.settings.card_width | default: 280 }}px;
    min-width: {{ block.settings.card_width | default: 280 }}px;
    height: {{ block.settings.card_height | default: 380 }}px;
    background: var(--card-bg);
    border: 1px solid var(--border);
    border-radius: var(--radius);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    overflow: visible;
    transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    cursor: default;
    backdrop-filter: blur(var(--lg-blur));
    -webkit-backdrop-filter: blur(var(--lg-blur));
    transform-origin: center;
    backface-visibility: hidden;
  }

  .carousel-card-{{ carousel_id }}:hover {
    transform: translateY(-6px) scale(1.01);
    border-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6);
    background: {{ block.settings.card_background | default: '#111111' | color_lighten: 5 | color_modify: 'alpha', 0.98 }};
  }

  /* Center card (Card 3) - larger size */
  .carousel-card-{{ carousel_id }}.center-card {
    width: calc({{ block.settings.card_width | default: 280 }}px * 1.05);
    height: calc({{ block.settings.card_height | default: 380 }}px * 1.05);
    transform: scale({{ block.settings.center_card_scale | default: 1.02 }});
    z-index: 10;
  }

  .carousel-card-{{ carousel_id }}.center-card:hover {
    transform: translateY(-8px) scale(calc({{ block.settings.center_card_scale | default: 1.05 }} + 0.02));
  }

  .card-media-{{ carousel_id }} {
    position: relative;
    width: 100%;
    height: 55%;
    background: var(--media-bg);
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 12px;
    border-radius: 12px 12px 0 0;
  }

  .card-media-{{ carousel_id }} img,
  .card-media-{{ carousel_id }} video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 12px;
    transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .carousel-card-{{ carousel_id }}:hover .card-media-{{ carousel_id }} img,
  .carousel-card-{{ carousel_id }}:hover .card-media-{{ carousel_id }} video {
    transform: scale(1.05);
  }

  .card-placeholder-{{ carousel_id }} {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 36px;
    font-weight: 700;
    color: var(--muted);
    text-align: center;
    transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    border: 1px solid var(--border);
  }

  .card-content-{{ carousel_id }} {
    padding: 24px 20px 20px 20px;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .card-title-{{ carousel_id }} {
    color: var(--text);
    font-size: 18px;
    font-weight: 600;
    margin: 0 0 8px;
    line-height: 1.3;
    text-align: center;
  }

  .card-subtext-{{ carousel_id }} {
    color: var(--muted);
    font-size: 13px;
    line-height: 1.4;
    margin: 0 0 8px;
    text-align: center;
    flex-grow: 1;
  }

  /* Glassy UI Button */
  .card-button-{{ carousel_id }} {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-height: 40px;
    padding: 12px 18px;
    border-radius: 9999px;
    border: 1px solid var(--lg-border);
    color: #fff;
    text-decoration: none;
    font-weight: 500;
    letter-spacing: -0.025em;
    font-size: 13px;
    line-height: 1.1;
    background: linear-gradient(0deg, rgba(255,255,255,.18), rgba(255,255,255,.18));
    backdrop-filter: saturate(var(--lg-saturate)) blur(var(--lg-blur));
    -webkit-backdrop-filter: saturate(var(--lg-saturate)) blur(var(--lg-blur));
    box-shadow: 0 6px 18px var(--lg-shadow), inset 0 1px 0 rgba(255,255,255,.12);
    transition: transform .2s, box-shadow .2s, background .2s;
    text-align: center;
    margin-top: auto;
    cursor: pointer;
  }

  .carousel-card-{{ carousel_id }}:hover .card-button-{{ carousel_id }} {
    transform: translateY(-1px);
    background: linear-gradient(0deg, rgba(255,255,255,.24), rgba(255,255,255,.24));
    box-shadow: 0 10px 24px rgba(0,0,0,.28), inset 0 1px 0 rgba(255,255,255,.14);
  }

  /* LOCKED FEATURED VIDEO CARD STYLES */
  .featured-video-{{ carousel_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 500px;
    padding: 20px 0 60px;
  }

  .video-card-{{ carousel_id }} {
    width: 100%;
    max-width: 600px;
    background: var(--card-bg);
    border: 1px solid var(--border);
    border-radius: var(--radius);
    box-shadow: 0 16px 48px rgba(0, 0, 0, 0.5);
    overflow: visible;
    transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    cursor: pointer;
    backdrop-filter: blur(var(--lg-blur));
    -webkit-backdrop-filter: blur(var(--lg-blur));
    position: relative;
  }

  .video-card-{{ carousel_id }}:hover {
    transform: translateY(-12px) scale(1.03);
    box-shadow: 0 24px 72px rgba(0, 0, 0, 0.7);
  }

  .video-media-{{ carousel_id }} {
    position: relative;
    width: 100%;
    height: 320px;
    background: var(--media-bg);
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 24px;
    border-radius: var(--radius) var(--radius) 0 0;
  }

  .video-media-{{ carousel_id }} video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 12px;
  }

  .video-placeholder-{{ carousel_id }} {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 72px;
    font-weight: 700;
    color: var(--muted);
    text-align: center;
    border: 1px solid var(--border);
  }

  .video-content-{{ carousel_id }} {
    padding: 32px 24px 24px 24px;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    text-align: center;
  }

  .video-title-{{ carousel_id }} {
    color: var(--text);
    font-size: 24px;
    font-weight: 700;
    margin: 0 0 16px;
    line-height: 1.2;
  }

  .video-subtext-{{ carousel_id }} {
    color: var(--muted);
    font-size: 16px;
    line-height: 1.5;
    margin: 0 0 20px;
    flex-grow: 1;
  }

  /* Download button for manual */
  .download-button-{{ carousel_id }} {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    min-height: 44px;
    padding: 14px 24px;
    border-radius: 9999px;
    border: 1px solid var(--lg-border);
    color: #fff;
    text-decoration: none;
    font-weight: 600;
    letter-spacing: -0.025em;
    font-size: 14px;
    line-height: 1.1;
    background: linear-gradient(0deg, rgba(255,255,255,.20), rgba(255,255,255,.20));
    backdrop-filter: saturate(var(--lg-saturate)) blur(var(--lg-blur));
    -webkit-backdrop-filter: saturate(var(--lg-saturate)) blur(var(--lg-blur));
    box-shadow: 0 8px 20px var(--lg-shadow), inset 0 1px 0 rgba(255,255,255,.15);
    transition: transform .2s, box-shadow .2s, background .2s;
    text-align: center;
    margin: 0 auto;
  }

  .download-button-{{ carousel_id }}:hover {
    transform: translateY(-2px);
    background: linear-gradient(0deg, rgba(255,255,255,.26), rgba(255,255,255,.26));
    box-shadow: 0 12px 28px rgba(0,0,0,.32), inset 0 1px 0 rgba(255,255,255,.18);
  }

  /* NAVIGATION ARROWS */
  .carousel-navigation-{{ carousel_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 56px;
    height: 56px;
    background: rgba(17, 17, 17, 0.9);
    border: 1px solid var(--border);
    border-radius: 50%;
    color: var(--text);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 200;
    backdrop-filter: blur(var(--lg-blur));
    -webkit-backdrop-filter: blur(var(--lg-blur));
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  .carousel-navigation-{{ carousel_id }}:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-50%) scale(1.1);
  }

  .carousel-navigation-{{ carousel_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .carousel-navigation--prev-{{ carousel_id }} { left: 20px; }
  .carousel-navigation--next-{{ carousel_id }} { right: 20px; }

  .carousel-navigation-{{ carousel_id }} svg {
    width: 22px; height: 22px; stroke-width: 2.5;
  }

  /* Empty state */
  .empty-state-{{ carousel_id }} {
    text-align: center;
    padding: 80px 20px;
    color: var(--muted);
  }

  .empty-state-title-{{ carousel_id }} {
    font-size: 20px;
    font-weight: 600;
    margin: 0 0 12px;
    color: var(--text);
  }

  .empty-state-text-{{ carousel_id }} {
    font-size: 15px;
    opacity: 0.8;
  }

  /* MOBILE RESPONSIVENESS */
  @media (max-width: 1200px) {
    .carousel-container-{{ carousel_id }} { padding: 0 16px; }
    .carousel-track-container-{{ carousel_id }} { margin: 0 60px; }
    .carousel-navigation--prev-{{ carousel_id }} { left: 8px; }
    .carousel-navigation--next-{{ carousel_id }} { right: 8px; }
  }

  @media (max-width: 768px) {
    .product-metafield-carousel-{{ carousel_id }} {
          --pt: {{ block.settings.section_padding_top | default: 80 | times: 0.6 | round }}px;
    --pb: {{ block.settings.section_padding_bottom | default: 80 | times: 0.6 | round }}px;
  }

  .carousel-container-{{ carousel_id }} { padding: 0 12px; }
  .carousel-section-{{ carousel_id }} { padding: {{ block.settings.section_inner_spacing | default: 40 | times: 0.6 | round }}px 0; }
  .section-title-{{ carousel_id }} { margin-bottom: {{ block.settings.heading_spacing | default: 60 | times: 0.67 | round }}px; }

    .carousel-track-container-{{ carousel_id }} {
      margin: 0;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }

    .carousel-track-container-{{ carousel_id }}::-webkit-scrollbar {
      display: none;
    }

    .carousel-track-{{ carousel_id }} {
      gap: 16px;
      padding: 0 16px;
    }

    .carousel-card-{{ carousel_id }} {
      scroll-snap-align: center;
      width: 280px;
      min-width: 280px;
      height: 400px;
    }

    .carousel-card-{{ carousel_id }}.center-card {
      width: 300px;
      height: 420px;
      transform: none;
    }

    .carousel-card-{{ carousel_id }}.center-card:hover {
      transform: translateY(-4px);
    }

    .carousel-navigation-{{ carousel_id }} {
      display: none;
    }

    .video-card-{{ carousel_id }} {
      margin: 0 16px;
    }

    .video-media-{{ carousel_id }} {
      height: 260px;
      padding: 20px;
    }

    .video-placeholder-{{ carousel_id }} {
      font-size: 48px;
    }
  }

  /* REDUCED MOTION */
  @media (prefers-reduced-motion: reduce) {
    .carousel-card-{{ carousel_id }},
    .video-card-{{ carousel_id }},
    .carousel-track-{{ carousel_id }},
    .card-media-{{ carousel_id }} img,
    .card-media-{{ carousel_id }} video {
      transition: none;
    }

    .carousel-card-{{ carousel_id }}:hover,
    .video-card-{{ carousel_id }}:hover,
    .carousel-card-{{ carousel_id }}:hover .card-media-{{ carousel_id }} img,
    .carousel-card-{{ carousel_id }}:hover .card-media-{{ carousel_id }} video {
      transform: none;
    }
  }

  /* Backdrop filter fallback */
  @supports not ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
    .card-button-{{ carousel_id }},
    .download-button-{{ carousel_id }} {
      background: rgba(255,255,255,.14);
      box-shadow: 0 8px 20px rgba(0,0,0,.25);
    }
  }

  /* DEBUG PANEL STYLES */
  .debug-panel-{{ carousel_id }} {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 400px;
    max-width: calc(100vw - 40px);
    max-height: 80vh;
    background: rgba(0, 0, 0, 0.95);
    color: #00ff00;
    font-family: 'Courier New', monospace;
    font-size: 11px;
    line-height: 1.3;
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #333;
    z-index: 999999;
    overflow-y: auto;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .debug-panel-{{ carousel_id }} h3 {
    color: #ffff00;
    margin: 0 0 10px 0;
    padding-bottom: 5px;
    border-bottom: 1px solid #333;
    font-size: 13px;
  }

  .debug-panel-{{ carousel_id }} .log-entry {
    margin-bottom: 8px;
    padding: 4px 8px;
    background: rgba(0, 255, 0, 0.1);
    border-left: 2px solid #00ff00;
    border-radius: 3px;
    word-wrap: break-word;
  }

  .debug-panel-{{ carousel_id }} .log-entry.error {
    background: rgba(255, 0, 0, 0.1);
    border-left-color: #ff0000;
    color: #ff6666;
  }

  .debug-panel-{{ carousel_id }} .log-entry.warning {
    background: rgba(255, 255, 0, 0.1);
    border-left-color: #ffff00;
    color: #ffff99;
  }

  .debug-panel-{{ carousel_id }} .log-entry .timestamp {
    color: #888;
    font-size: 10px;
  }

  .debug-panel-{{ carousel_id }} .close-btn {
    position: absolute;
    top: 5px;
    right: 8px;
    background: none;
    border: none;
    color: #ff6666;
    font-size: 16px;
    cursor: pointer;
    font-weight: bold;
  }

  .debug-panel-{{ carousel_id }} .clear-btn {
    background: #333;
    border: 1px solid #555;
    color: #fff;
    padding: 4px 8px;
    font-size: 10px;
    cursor: pointer;
    border-radius: 3px;
    margin-bottom: 10px;
  }

  .debug-panel-{{ carousel_id }} .clear-btn:hover {
    background: #555;
  }

  .debug-toggle-{{ carousel_id }} {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.8);
    color: #00ff00;
    border: 1px solid #333;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-family: monospace;
    font-size: 12px;
    z-index: 999998;
  }

  .debug-toggle-{{ carousel_id }}:hover {
    background: rgba(0, 0, 0, 0.95);
  }
{% endstyle %}

  <product-metafield-carousel-{{ carousel_id }}
    class="product-metafield-carousel-{{ carousel_id }}"
    style="--page-bg: {{ block.settings.background_color | default: '#000000' }}; --card-bg: {{ block.settings.card_background | default: '#111111' }}; --media-bg: {{ block.settings.media_background | default: '#1a1a1a' }}; --text: {{ block.settings.text_color | default: '#ffffff' }}; --muted: {{ block.settings.muted_text_color | default: '#999999' }}; --border: {{ block.settings.border_color | default: '#ffffff' | color_modify: 'alpha', 0.10 }}; --focus: {{ block.settings.focus_color | default: '#ffffff' }}; --radius: {{ block.settings.border_radius | default: 20 }}px; --pt: {{ block.settings.section_padding_top | default: 80 }}px; --pb: {{ block.settings.section_padding_bottom | default: 80 }}px;"
    data-video-hover-only="{{ block.settings.video_hover_only }}"
    data-hero-video-hover-only="{{ block.settings.hero_video_hover_only }}"
    {{ block.shopify_attributes }}
  >
  <div class="carousel-container-{{ carousel_id }}">

  <!-- ABOUT THE PRODUCT SECTION -->
  {% comment %} Works with single metaobject or list of metaobjects. Robust media resolver. {% endcomment %}
  {% liquid
    assign about_meta  = product.metafields.custom.about_the_product
    assign about_type  = about_meta.type | default: ''
    assign cards = '' | split: ''
    if about_type == 'list.metaobject_reference'
      assign cards = about_meta.value
    elsif about_type == 'metaobject_reference'
      assign single_card = about_meta.value
      if single_card
        assign cards = cards | push: single_card
      endif
    endif
    assign about_cards_count = 0
    if cards
      for _ in cards
        assign about_cards_count = about_cards_count | plus: 1
      endfor
    endif
  %}

  <section class="carousel-section-{{ carousel_id }}">
    <h2 class="section-title-{{ carousel_id }}">{{ block.settings.about_heading | default: 'About the Product' }}</h2>

    {% if about_cards_count > 0 %}
      <div class="horizontal-carousel-{{ carousel_id }}">
        <div class="carousel-track-container-{{ carousel_id }}">
          <div class="carousel-track-{{ carousel_id }}" data-section="about">

            {%- for feature_card in cards -%}
              {%- liquid
                assign item_title        = feature_card.feature | default: block.settings.default_feature_text | default: 'Feature'
                assign item_description  = feature_card.description | default: ''
                assign item_link         = ''
                assign item_button_text  = ''

                # ---------- UNIVERSAL MEDIA RESOLVER (mirror service logic) ----------
                assign media_item = nil

                comment 'Prefer media_files (list of file_reference)'
                endcomment
                if feature_card.media_files
                  if feature_card.media_files.value
                    assign _list = feature_card.media_files.value
                  else
                    assign _list = feature_card.media_files
                  endif
                  if _list and _list.size > 0
                    assign media_item = _list.first
                  endif
                endif

                comment 'Fallbacks: media, image, media_file, file'
                endcomment
                if media_item == nil and feature_card.media
                  assign media_item = feature_card.media.value | default: feature_card.media
                endif
                if media_item == nil and feature_card.image
                  assign media_item = feature_card.image.value | default: feature_card.image
                endif
                if media_item == nil and feature_card.media_file
                  assign media_item = feature_card.media_file.value | default: feature_card.media_file
                endif
                if media_item == nil and feature_card.file
                  assign media_item = feature_card.file.value | default: feature_card.file
                endif

                # ---------- VIDEO DETECTION ----------
                assign is_video = false
                if block.settings.about_media_type == 'video'
                  assign is_video = true
                elsif block.settings.about_media_type == 'auto' and media_item
                  if media_item.media_type == 'video'
                    assign is_video = true
                  elsif media_item.url and media_item.url contains '.mp4'
                    assign is_video = true
                  endif
                endif
              -%}

              <div
                class="carousel-card-{{ carousel_id }}{% if forloop.index == 3 %} center-card{% endif %}"
                role="group"
                aria-label="{{ item_title | escape }}">
                <div class="card-media-{{ carousel_id }}">
                  {% if media_item %}
                    {% if is_video %}
                      <video
                        {% if media_item.sources and media_item.sources.size > 0 %}src="{{ media_item.sources[0].url }}"
                        {% elsif media_item.url %}src="{{ media_item.url }}"
                        {% else %}src="{{ media_item | file_url }}"{% endif %}
                        poster="{% if media_item.preview_image %}{{ media_item.preview_image | image_url: width: 600 }}{% endif %}"
                        muted loop playsinline loading="lazy" width="400" height="240"
                        {% if block.settings.video_hover_only %}data-hover-only="true"{% endif %}></video>
                    {% else %}
                      <img
                        src="{% if media_item.preview_image %}{{ media_item.preview_image | image_url: width: 400 }}{% elsif media_item.media_type == 'image' %}{{ media_item | image_url: width: 400 }}{% elsif media_item.url %}{{ media_item.url }}{% else %}{{ media_item | file_url }}{% endif %}"
                        alt="{{ media_item.alt | default: item_title | escape }}"
                        loading="lazy" width="400" height="240">
                    {% endif %}
                  {% else %}
                    <div class="card-placeholder-{{ carousel_id }}">{{ forloop.index }}</div>
                  {% endif %}
                </div>

                <div class="card-content-{{ carousel_id }}">
                  {% if item_title != blank %}<h3 class="card-title-{{ carousel_id }}">{{ item_title }}</h3>{% endif %}
                  {% if item_description != blank %}<p class="card-subtext-{{ carousel_id }}">{{ item_description | truncate: 100 }}</p>{% endif %}
                </div>
              </div>
            {%- endfor -%}
          </div>
        </div>

        {%- if about_cards_count > 1 -%}
          <button class="carousel-navigation-{{ carousel_id }} carousel-navigation--prev-{{ carousel_id }}" aria-label="Previous about slide" data-section="about" type="button">
            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M15 18L9 12L15 6"/></svg>
          </button>
          <button class="carousel-navigation-{{ carousel_id }} carousel-navigation--next-{{ carousel_id }}" aria-label="Next about slide" data-section="about" type="button">
            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M9 18L15 12L9 6"/></svg>
          </button>
        {%- endif -%}
      </div>
    {% else %}
      <div class="empty-state-{{ carousel_id }}">
        <h3 class="empty-state-title-{{ carousel_id }}">About the Product</h3>
        <p class="empty-state-text-{{ carousel_id }}">Assign a ‘feature_card’ metaobject (single or list) to the metafield.</p>
      </div>
    {% endif %}
  </section>


    <!-- HOW IT WORKS SECTION -->
    {% comment %} FIXED: Removed navigation arrows - this is not a carousel, just a single video {% endcomment %}
    {% liquid
      assign hero_video = nil
      assign manual_file = nil
      
      if product and product.metafields.custom.hero_video
        assign hero_video = product.metafields.custom.hero_video.value | default: product.metafields.custom.hero_video
      endif
      
      if product and product.metafields.custom.manual
        assign manual_file = product.metafields.custom.manual.value | default: product.metafields.custom.manual
      endif
    %}

    <section class="carousel-section-{{ carousel_id }}">
      <h2 class="section-title-{{ carousel_id }}">{{ block.settings.how_it_works_heading | default: 'How It Works' }}</h2>
      
      <div class="featured-video-{{ carousel_id }}">
        <div class="video-card-{{ carousel_id }}">
          <div class="video-media-{{ carousel_id }}">
            {% if hero_video %}
              <video
                {% if hero_video.sources and hero_video.sources.size > 1 %}
                  src="{{ hero_video.sources[1].url }}"
                {% elsif hero_video.sources and hero_video.sources.size > 0 %}
                  src="{{ hero_video.sources[0].url }}"
                {% elsif hero_video.url %}
                  src="{{ hero_video.url }}"
                {% else %}
                  src="{{ hero_video | file_url }}"
                {% endif %}
                poster="{% if hero_video.preview_image %}{{ hero_video.preview_image | image_url: width: 800 }}{% endif %}"
                muted
                loop
                playsinline
                loading="lazy"
                width="800"
                height="450"
                {% if block.settings.hero_video_hover_only %}data-hover-only="true"{% endif %}
              ></video>
            {% else %}
              <div class="video-placeholder-{{ carousel_id }}">
                3
                <div style="font-size: 16px; margin-top: 16px; font-weight: 500;">Video</div>
              </div>
            {% endif %}
          </div>

          <div class="video-content-{{ carousel_id }}">
            <h3 class="video-title-{{ carousel_id }}">{{ block.settings.video_title | default: 'How It Works' }}</h3>
            <p class="video-subtext-{{ carousel_id }}">{{ block.settings.video_description | default: 'Watch our step-by-step process in action' }}</p>
            
            {% if manual_file %}
              <a 
                href="{{ manual_file }}" 
                class="download-button-{{ carousel_id }}"
                download
                target="_blank"
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                  <polyline points="7,10 12,15 17,10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
                Download Manual (PDF)
              </a>
            {% endif %}
          </div>
        </div>
      </div>
    </section>

    <!-- AFTER SALES SERVICE SECTION -->
    {% comment %} FIXED: Proper media handling for service cards {% endcomment %}
    {% liquid
      assign service_items = nil
      assign service_card_count = 0
      
      if product and product.metafields.custom.after_sales_service
        assign service_items = product.metafields.custom.after_sales_service.value
        
        comment 'Count items by iterating through MetaobjectListDrop'
        endcomment
        if service_items
          for item in service_items
            assign service_card_count = service_card_count | plus: 1
          endfor
        endif
      endif
    %}

    <section class="carousel-section-{{ carousel_id }}">
      <h2 class="section-title-{{ carousel_id }}">{{ block.settings.after_sales_heading | default: 'After Sales Service' }}</h2>
      
      {% if service_card_count > 0 %}
        <div class="horizontal-carousel-{{ carousel_id }}">
          <div class="carousel-track-container-{{ carousel_id }}">
            <div class="carousel-track-{{ carousel_id }}" data-section="service">
              {% for service_card in service_items %}
                {% liquid
                  assign item_title = service_card.title | default: 'Service'
                  assign item_description = service_card.description | default: ''
                  assign item_link = ''
                  assign item_button_text = ''
                  
                  comment 'FIXED: Get media from service_card metaobject - prioritize media_files'
                  endcomment
                  assign media_item = nil
                  
                  comment 'For service_cards, try media_files first (based on metaobject structure)'
                  endcomment
                  if service_card.media_files
                    if service_card.media_files.value
                      assign media_list = service_card.media_files.value
                      if media_list.size > 0
                        assign media_item = media_list.first
                      endif
                    elsif service_card.media_files.size and service_card.media_files.size > 0
                      assign media_item = service_card.media_files.first
                    else
                      assign media_item = service_card.media_files
                    endif
                  endif
                  
                  comment 'Fallback to media field'
                  endcomment
                  if media_item == nil and service_card.media
                    assign media_item = service_card.media.value | default: service_card.media
                  endif
                  
                  assign is_video = false
                  if block.settings.service_media_type == 'video'
                    assign is_video = true
                  elsif block.settings.service_media_type == 'auto' and media_item and media_item.media_type == 'video'
                    assign is_video = true
                  elsif block.settings.service_media_type == 'auto' and media_item and media_item contains '.mp4'
                    assign is_video = true
                  endif
                %}

                <div
                  class="carousel-card-{{ carousel_id }}{% if forloop.index == 3 %} center-card{% endif %}"
                  role="group"
                  aria-label="{{ item_title | escape }}"
                >
                  <div class="card-media-{{ carousel_id }}">
                    {% if media_item %}
                      {% if is_video %}
                        <video
                          {% if media_item.sources and media_item.sources.size > 1 %}
                            src="{{ media_item.sources[1].url }}"
                          {% elsif media_item.sources and media_item.sources.size > 0 %}
                            src="{{ media_item.sources[0].url }}"
                          {% elsif media_item.url %}
                            src="{{ media_item.url }}"
                          {% else %}
                            src="{{ media_item | file_url }}"
                          {% endif %}
                          poster="{% if media_item.preview_image %}{{ media_item.preview_image | image_url: width: 400 }}{% endif %}"
                          muted
                          loop
                          playsinline
                          loading="lazy"
                          width="400"
                          height="240"
                          {% if block.settings.video_hover_only %}data-hover-only="true"{% endif %}
                        ></video>
                      {% else %}
                        <img
                          src="{% if media_item.preview_image %}{{ media_item.preview_image | image_url: width: 400 }}{% elsif media_item.media_type == 'image' %}{{ media_item | image_url: width: 400 }}{% elsif media_item.url %}{{ media_item.url }}{% else %}{{ media_item | file_url }}{% endif %}"
                          alt="{{ media_item.alt | default: item_title | escape }}"
                          loading="lazy"
                          width="400"
                          height="240"
                        >
                      {% endif %}
                    {% else %}
                      <div class="card-placeholder-{{ carousel_id }}">
                        {{ forloop.index }}
                      </div>
                    {% endif %}
                  </div>

                  <div class="card-content-{{ carousel_id }}">
                    {% if item_title != blank %}
                      <h3 class="card-title-{{ carousel_id }}">{{ item_title }}</h3>
                    {% endif %}

                    {% if item_description != blank %}
                      <p class="card-subtext-{{ carousel_id }}">{{ item_description | truncate: 100 }}</p>
                    {% endif %}
                  </div>
                </div>
              {% endfor %}
            </div>
          </div>

          {% if service_card_count > 1 %}
            <button
              class="carousel-navigation-{{ carousel_id }} carousel-navigation--prev-{{ carousel_id }}"
              aria-label="Previous service slide"
              data-section="service"
              type="button"
            >
              <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M15 18L9 12L15 6"/>
              </svg>
            </button>

            <button
              class="carousel-navigation-{{ carousel_id }} carousel-navigation--next-{{ carousel_id }}"
              aria-label="Next service slide"
              data-section="service"
              type="button"
            >
              <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M9 18L15 12L9 6"/>
              </svg>
            </button>
          {% endif %}
        </div>
      {% else %}
        <div class="empty-state-{{ carousel_id }}">
          <h3 class="empty-state-title-{{ carousel_id }}">After Sales Service</h3>
          <p class="empty-state-text-{{ carousel_id }}">Add service cards to the "after_sales_service" metafield to display here</p>
        </div>
      {% endif %}
    </section>

  </div>
</product-metafield-carousel-{{ carousel_id }}>

<script>
// DEBUG UTILITY - logs to both console and UI with error handling
const debugLog = {
  log: function(message, data = null, type = 'log') {
    try {
      // Console logging
      if (data) {
        console.log(message, data);
      } else {
        console.log(message);
      }

      // UI logging - check if panel exists
      const debugPanel = document.getElementById('debug-logs-{{ carousel_id }}');
      if (debugPanel) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${type}`;
        
        let logContent = `<span class="timestamp">[${timestamp}]</span> ${message}`;
        if (data) {
          logContent += `<br><pre style="margin: 4px 0; font-size: 10px; color: #ccc;">${JSON.stringify(data, null, 2)}</pre>`;
        }
        
        logEntry.innerHTML = logContent;
        debugPanel.appendChild(logEntry);
        debugPanel.scrollTop = debugPanel.scrollHeight;
        
        // Limit log entries to prevent memory issues
        if (debugPanel.children.length > 50) {
          debugPanel.removeChild(debugPanel.firstChild);
        }
      } else {
        console.warn('Debug panel not found, creating fallback');
        // Fallback: try to create debug panel if it doesn't exist
        this.createDebugPanel();
      }
    } catch (e) {
      console.error('Debug logging error:', e);
    }
  },
  
  error: function(message, data = null) {
    this.log(message, data, 'error');
  },
  
  warn: function(message, data = null) {
    this.log(message, data, 'warning');
  },

  createDebugPanel: function() {
    try {
      const existingPanel = document.getElementById('debug-panel-{{ carousel_id }}');
      if (existingPanel) return;

      const panel = document.createElement('div');
      panel.id = 'debug-panel-{{ carousel_id }}';
      panel.className = 'debug-panel-{{ carousel_id }}';
      panel.innerHTML = `
        <button class="close-btn" onclick="document.getElementById('debug-panel-{{ carousel_id }}').style.display='none'">×</button>
        <h3>Debug Console - Carousel {{ carousel_id }}</h3>
        <button class="clear-btn" onclick="document.getElementById('debug-logs-{{ carousel_id }}').innerHTML=''">Clear Logs</button>
        <div id="debug-logs-{{ carousel_id }}"></div>
      `;
      document.body.appendChild(panel);
      console.log('Debug panel created dynamically');
    } catch (e) {
      console.error('Failed to create debug panel:', e);
    }
  }
};

// Immediate test log
debugLog.log('FIXED VERSION - DEBUG SYSTEM ACTIVE');
debugLog.log('Page loaded at: ' + new Date().toISOString());
debugLog.log('Window size: ' + window.innerWidth + 'x' + window.innerHeight);

// Log CSS variables being applied
debugLog.log('Product Carousel CSS Variables:', {
        'background_color': '{{ block.settings.background_color | default: "#000000" }}',
      'card_background': '{{ block.settings.card_background | default: "#111111" }}',
      'media_background': '{{ block.settings.media_background | default: "#1a1a1a" }}',
      'text_color': '{{ block.settings.text_color | default: "#ffffff" }}',
      'muted_text_color': '{{ block.settings.muted_text_color | default: "#999999" }}',
      'border_color': '{{ block.settings.border_color | default: "#ffffff" }}',
      'border_color_processed': '{{ block.settings.border_color | default: "#ffffff" | color_modify: "alpha", 0.10 }}',
      'focus_color': '{{ block.settings.focus_color | default: "#ffffff" }}',
      'border_radius': '{{ block.settings.border_radius | default: 20 }}px',
      'section_padding_top': '{{ block.settings.section_padding_top | default: 80 }}px',
      'section_padding_bottom': '{{ block.settings.section_padding_bottom | default: 80 }}px',
      'section_inner_spacing': '{{ block.settings.section_inner_spacing | default: 40 }}px',
      'heading_spacing': '{{ block.settings.heading_spacing | default: 60 }}px',
      'heading_size': '{{ block.settings.heading_size | default: 36 }}px',
      'video_hover_only': {{ block.settings.video_hover_only | json }},
      'hero_video_hover_only': {{ block.settings.hero_video_hover_only | json }}
});

// Check if we're in Theme Editor
if (window.Shopify && window.Shopify.designMode) {
  debugLog.log('THEME EDITOR DETECTED - Design mode is active');
} else {
  debugLog.log('Not in Theme Editor mode');
}

// Check if our carousel element exists
const carouselElement = document.querySelector('product-metafield-carousel-{{ carousel_id }}');
debugLog.log('Carousel element check:', {
  found: !!carouselElement,
  id: '{{ carousel_id }}',
  sectionId: '{{ section.id }}'
});

(function() {
  debugLog.log('Initializing FIXED Product Carousel {{ carousel_id }}');
  
  // Guard against re-definition during Theme Editor reloads
  if (!customElements.get('product-metafield-carousel-{{ carousel_id }}')) {
    debugLog.log('Defining new custom element product-metafield-carousel-{{ carousel_id }}');
    
    customElements.define(
      'product-metafield-carousel-{{ carousel_id }}',
      class ProductMetafieldCarousel extends HTMLElement {
        constructor() {
          super();
          this.carousels = {};
          this.isDesktop = window.innerWidth >= 768;
          this.initialized = false;
          this.resizeHandlerAttached = false;
        }

        connectedCallback() {
          if (this.initialized) return;
          this.initialized = true;
          requestAnimationFrame(() => {
            this.initializeCarousels();
            this.setupEventListeners();
            this.setupVideoControls();
            this.logComputedStyles();
          });
        }

        disconnectedCallback() {
          this.initialized = false;
          // remove global listeners if attached
          if (this.__resizeHandler) {
            window.removeEventListener('resize', this.__resizeHandler);
            this.__resizeHandler = null;
          }
        }

      logComputedStyles() {
        const element = this;
        const computedStyles = window.getComputedStyle(element);
        debugLog.log('FIXED - Computed CSS properties for {{ carousel_id }}:', {
          '--page-bg': computedStyles.getPropertyValue('--page-bg'),
          '--card-bg': computedStyles.getPropertyValue('--card-bg'),
          '--media-bg': computedStyles.getPropertyValue('--media-bg'),
          '--text': computedStyles.getPropertyValue('--text'),
          '--muted': computedStyles.getPropertyValue('--muted'),
          '--border': computedStyles.getPropertyValue('--border'),
          '--focus': computedStyles.getPropertyValue('--focus'),
          '--radius': computedStyles.getPropertyValue('--radius'),
          '--pt': computedStyles.getPropertyValue('--pt'),
          '--pb': computedStyles.getPropertyValue('--pb'),
          'paddingTop': computedStyles.paddingTop,
          'paddingBottom': computedStyles.paddingBottom,
          'color': computedStyles.color,
          'background': computedStyles.background
        });
      }

      initializeCarousels() {
        debugLog.log('FIXED - InitializeCarousels starting for {{ carousel_id }}');
        const carouselSections = ['about', 'service'];
        
        carouselSections.forEach(section => {
          debugLog.log(`FIXED - Processing section: ${section}`);
          const track = this.querySelector(`[data-section="${section}"]`);
          const container = track?.parentElement;
          const prevBtn = this.querySelector(`[data-section="${section}"].carousel-navigation--prev-{{ carousel_id }}`);
          const nextBtn = this.querySelector(`[data-section="${section}"].carousel-navigation--next-{{ carousel_id }}`);

          debugLog.log(`FIXED - Section ${section} elements:`, {
            track: !!track,
            container: !!container,
            prevBtn: !!prevBtn,
            nextBtn: !!nextBtn
          });

          if (track && container) {
            const cards = track.children;
            const totalCards = cards.length;
            
            debugLog.log(`FIXED - Section ${section} cards count: ${totalCards}`);
            
            // Compute carousel dimensions and visibility
            const dimensions = this.computeCarouselDimensions(track, container);
            debugLog.log(`FIXED - Section ${section} dimensions:`, dimensions);
            
            this.carousels[section] = {
              track,
              container,
              prevBtn,
              nextBtn,
              currentSlide: 0,
              totalCards,
              ...dimensions,
              isTransitioning: false
            };

            this.updateCarouselPosition(section, 0);
            this.updateNavigationState(section);
            
            debugLog.log(`FIXED - Section ${section} carousel initialized:`, this.carousels[section]);
          } else {
            debugLog.warn(`FIXED - Section ${section} missing required elements`);
          }
        });
      }

      computeCarouselDimensions(track, container) {
        const cards = track.children;
        if (cards.length === 0) {
          return { cardWidth: 320, gap: 24, visibleCount: 1, totalSlides: 1 };
        }

        const firstCard = cards[0];
        const cardWidth = firstCard.offsetWidth || 320;
        
        // Get gap from CSS or default
        const computedTrackStyle = window.getComputedStyle(track);
        const gap = parseFloat(computedTrackStyle.columnGap || computedTrackStyle.gap) || 24;
        
        // Use actual container width without arbitrary subtraction
        const containerWidth = container.clientWidth;
        const visibleCount = Math.max(1, Math.floor(containerWidth / (cardWidth + gap)));
        const totalSlides = Math.max(1, cards.length - visibleCount + 1);

        return { cardWidth, gap, visibleCount, totalSlides };
      }

      setupEventListeners() {
        debugLog.log('FIXED - SetupEventListeners starting for {{ carousel_id }}');
        
        // Navigation buttons - only attach once
        const navigationButtons = this.querySelectorAll('.carousel-navigation-{{ carousel_id }}');
        debugLog.log(`FIXED - Found ${navigationButtons.length} navigation buttons`);
        
        navigationButtons.forEach((btn, index) => {
          if (!btn.dataset.listenerAttached) {
            btn.dataset.listenerAttached = 'true';
            debugLog.log(`FIXED - Attaching click listener to navigation button ${index}`);
            
            btn.addEventListener('click', (e) => {
              e.preventDefault();
              const section = btn.dataset.section;
              const isNext = btn.classList.contains('carousel-navigation--next-{{ carousel_id }}');
              
              debugLog.log(`FIXED - Navigation button clicked:`, {
                section,
                isNext,
                buttonIndex: index
              });
              
              if (isNext) {
                this.nextSlide(section);
              } else {
                this.prevSlide(section);
              }
            });
          }
        });

        // Touch support for mobile
        Object.keys(this.carousels).forEach(section => {
          debugLog.log(`FIXED - Setting up touch support for section: ${section}`);
          this.setupTouchSupport(section);
        });

        // Resize handler with debouncing
        let resizeTimeout;
        const handleResize = () => {
          debugLog.log('FIXED - Window resize detected');
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(() => {
            const wasDesktop = this.isDesktop;
            this.isDesktop = window.innerWidth >= 768;
            
            debugLog.log(`FIXED - Resize processed - was desktop: ${wasDesktop}, is desktop: ${this.isDesktop}`);
            
            // Recompute carousel dimensions on resize
            Object.keys(this.carousels).forEach(section => {
              const carousel = this.carousels[section];
              if (carousel && carousel.track && carousel.container) {
                const newDimensions = this.computeCarouselDimensions(carousel.track, carousel.container);
                Object.assign(carousel, newDimensions);
                
                // Clamp current slide to valid range after recomputation
                carousel.currentSlide = Math.max(0, Math.min(carousel.currentSlide, carousel.totalSlides - 1));
                
                debugLog.log(`FIXED - Section ${section} dimensions after resize:`, newDimensions);
                this.updateCarouselPosition(section, carousel.currentSlide);
              }
            });
          }, 250);
        };

        if (!this.resizeHandlerAttached) {
          this.resizeHandlerAttached = true;
          this.__resizeHandler = handleResize;
          window.addEventListener('resize', this.__resizeHandler);
        }
      }

      setupVideoControls() {
        debugLog.log('FIXED - SetupVideoControls starting for {{ carousel_id }}');
        
        // Get current settings from data attributes (updated via Theme Editor)
        const heroVideoHoverOnly = this.dataset.heroVideoHoverOnly === 'true';
        const carouselVideoHoverOnly = this.dataset.videoHoverOnly === 'true';
        
        // Handle featured video
        const videoCard = this.querySelector('.video-card-{{ carousel_id }}');
        const featuredVideo = videoCard?.querySelector('video');
        
        debugLog.log('FIXED - Featured video elements:', {
          videoCard: !!videoCard,
          featuredVideo: !!featuredVideo,
          heroVideoHoverOnly,
          hasHoverOnlyAttr: featuredVideo?.hasAttribute('data-hover-only')
        });
        
        if (featuredVideo && videoCard) {
          // Remove existing listeners
          const oldEnterHandler = videoCard._mouseEnterHandler;
          const oldLeaveHandler = videoCard._mouseLeaveHandler;
          if (oldEnterHandler) videoCard.removeEventListener('mouseenter', oldEnterHandler);
          if (oldLeaveHandler) videoCard.removeEventListener('mouseleave', oldLeaveHandler);
          
          const isHoverOnly = heroVideoHoverOnly || featuredVideo.hasAttribute('data-hover-only');
          
          debugLog.log(`FIXED - Featured video hover-only: ${isHoverOnly}`);
          
          if (isHoverOnly) {
            featuredVideo.pause();
            debugLog.log('FIXED - Featured video paused, adding hover listeners');
            
            const enterHandler = () => {
              debugLog.log('FIXED - Featured video mouseenter - playing');
              featuredVideo.play().catch(e => debugLog.error('FIXED - Featured video play error:', e));
            };
            const leaveHandler = () => {
              debugLog.log('FIXED - Featured video mouseleave - pausing and resetting');
              featuredVideo.pause();
              featuredVideo.currentTime = 0;
            };
            
            videoCard.addEventListener('mouseenter', enterHandler);
            videoCard.addEventListener('mouseleave', leaveHandler);
            videoCard._mouseEnterHandler = enterHandler;
            videoCard._mouseLeaveHandler = leaveHandler;
          }
        }

        // Handle carousel videos
        const carouselCards = this.querySelectorAll('.carousel-card-{{ carousel_id }}');
        debugLog.log(`FIXED - Found ${carouselCards.length} carousel cards`);
        
        carouselCards.forEach((card, index) => {
          const video = card.querySelector('video');
          if (video) {
            // Remove existing listeners
            const oldEnterHandler = card._mouseEnterHandler;
            const oldLeaveHandler = card._mouseLeaveHandler;
            if (oldEnterHandler) card.removeEventListener('mouseenter', oldEnterHandler);
            if (oldLeaveHandler) card.removeEventListener('mouseleave', oldLeaveHandler);
            
            const isHoverOnly = carouselVideoHoverOnly || video.hasAttribute('data-hover-only');
            
            debugLog.log(`FIXED - Card ${index} has video:`, {
              hasVideo: true,
              isHoverOnly,
              carouselVideoHoverOnly,
              hasHoverOnlyAttr: video.hasAttribute('data-hover-only')
            });
            
            if (isHoverOnly) {
              video.pause();
              debugLog.log(`FIXED - Card ${index} video paused, adding hover listeners`);
              
              const enterHandler = () => {
                debugLog.log(`FIXED - Card ${index} video mouseenter - playing`);
                video.play().catch(e => debugLog.error(`FIXED - Card ${index} video play error:`, e));
              };
              const leaveHandler = () => {
                debugLog.log(`FIXED - Card ${index} video mouseleave - pausing and resetting`);
                video.pause();
                video.currentTime = 0;
              };
              
              card.addEventListener('mouseenter', enterHandler);
              card.addEventListener('mouseleave', leaveHandler);
              card._mouseEnterHandler = enterHandler;
              card._mouseLeaveHandler = leaveHandler;
            }
          }
        });
      }

      setupTouchSupport(section) {
        const container = this.carousels[section].container;
        if (container.dataset.touchAttached) return;
        container.dataset.touchAttached = 'true';
        
        let startX = 0;
        let currentX = 0;
        let isDragging = false;

        container.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          isDragging = true;
        }, { passive: true });

        container.addEventListener('touchmove', (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
        }, { passive: true });

        container.addEventListener('touchend', () => {
          if (!isDragging) return;
          isDragging = false;

          const diff = startX - currentX;
          const threshold = 50;

          if (Math.abs(diff) > threshold) {
            if (diff > 0) {
              this.nextSlide(section);
            } else {
              this.prevSlide(section);
            }
          }
        }, { passive: true });
      }

      updateNavigationState(section) {
        const carousel = this.carousels[section];
        if (!carousel) {
          debugLog.warn(`FIXED - UpdateNavigationState: No carousel found for section ${section}`);
          return;
        }

        // Use totalSlides for disable logic, not totalCards
        const shouldDisable = carousel.totalSlides <= 1;
        const prevDisabled = carousel.currentSlide <= 0 || shouldDisable;
        const nextDisabled = carousel.currentSlide >= carousel.totalSlides - 1 || shouldDisable;
        
        debugLog.log(`FIXED - UpdateNavigationState for ${section}:`, {
          totalCards: carousel.totalCards,
          visibleCount: carousel.visibleCount,
          currentSlide: carousel.currentSlide,
          totalSlides: carousel.totalSlides,
          shouldDisable,
          prevDisabled,
          nextDisabled
        });
        
        if (carousel.prevBtn) {
          carousel.prevBtn.disabled = prevDisabled;
          debugLog.log(`FIXED - Section ${section} prev button disabled: ${prevDisabled}`);
        }
        if (carousel.nextBtn) {
          carousel.nextBtn.disabled = nextDisabled;
          debugLog.log(`FIXED - Section ${section} next button disabled: ${nextDisabled}`);
        }
      }

      updateCarouselPosition(section, slideIndex) {
        const carousel = this.carousels[section];
        if (!carousel || carousel.isTransitioning) {
          debugLog.warn(`FIXED - UpdateCarouselPosition: Cannot update ${section} - carousel missing or transitioning`);
          return;
        }

        // Clamp slideIndex to valid range using totalSlides
        const newSlide = Math.max(0, Math.min(slideIndex, carousel.totalSlides - 1));
        const slideChanged = newSlide !== carousel.currentSlide;
        carousel.currentSlide = newSlide;
        carousel.isTransitioning = true;

        debugLog.log(`FIXED - UpdateCarouselPosition for ${section}:`, {
          requestedSlide: slideIndex,
          actualSlide: newSlide,
          slideChanged,
          isDesktop: this.isDesktop,
          totalCards: carousel.totalCards,
          visibleCount: carousel.visibleCount,
          totalSlides: carousel.totalSlides
        });

        if (this.isDesktop && carousel.totalCards > carousel.visibleCount) {
          const offset = carousel.currentSlide * (carousel.cardWidth + carousel.gap);
          
          debugLog.log(`FIXED - Setting transform for ${section}:`, {
            cardWidth: carousel.cardWidth,
            gap: carousel.gap,
            offset,
            transform: `translateX(-${offset}px)`
          });
          
          carousel.track.style.transform = `translateX(-${offset}px)`;
        } else if (!this.isDesktop) {
          // On mobile, reset transform since we use scroll-snap
          carousel.track.style.transform = '';
        }

        this.updateNavigationState(section);

        setTimeout(() => {
          carousel.isTransitioning = false;
          debugLog.log(`FIXED - Section ${section} transition complete`);
        }, 600);
      }

      nextSlide(section) {
        const carousel = this.carousels[section];
        debugLog.log(`FIXED - NextSlide called for ${section}:`, {
          hasCarousel: !!carousel,
          currentSlide: carousel?.currentSlide,
          totalSlides: carousel?.totalSlides,
          canNext: carousel && carousel.currentSlide < carousel.totalSlides - 1
        });
        
        if (carousel && carousel.currentSlide < carousel.totalSlides - 1) {
          this.updateCarouselPosition(section, carousel.currentSlide + 1);
        }
      }

      prevSlide(section) {
        const carousel = this.carousels[section];
        debugLog.log(`FIXED - PrevSlide called for ${section}:`, {
          hasCarousel: !!carousel,
          currentSlide: carousel?.currentSlide,
          canPrev: carousel && carousel.currentSlide > 0
        });
        
        if (carousel && carousel.currentSlide > 0) {
          this.updateCarouselPosition(section, carousel.currentSlide - 1);
        }
      }
    }
  );
  }

  // Theme Editor changes re-initialize the section
  if (window.Shopify && window.Shopify.designMode) {
    document.addEventListener('shopify:section:load', (e) => {
      if (e.detail.sectionId === '{{ section.id }}') {
        // New DOM for this section has just been injected; the custom element
        // class is already registered, so its connectedCallback will run.
        debugLog.log('FIXED - shopify:section:load -> reinit {{ carousel_id }}');
      }
    });

    document.addEventListener('shopify:section:unload', (e) => {
      if (e.detail.sectionId === '{{ section.id }}') {
        const el = document.querySelector('product-metafield-carousel-{{ carousel_id }}');
        // call cleanup if present
        el?.disconnectedCallback?.();
        debugLog.log('FIXED - shopify:section:unload -> cleanup {{ carousel_id }}');
      }
    });

    // Optional: when selecting/deselecting the section in the editor, re-run video bindings
    document.addEventListener('shopify:section:select', (e) => {
      if (e.detail.sectionId === '{{ section.id }}') {
        document.querySelector('product-metafield-carousel-{{ carousel_id }}')?.setupVideoControls?.();
      }
    });
  }
})();
</script>

{% schema %}
{
  "name": "Product Carousel",
  "settings": [
    {
      "type": "header",
      "content": "⚠️ Important Setup Notes"
    },
    {
      "type": "paragraph",
      "content": "This component now uses metaobjects for About and After Sales sections:"
    },
    {
      "type": "paragraph",
      "content": "• About the Product: Uses 'about_the_product' metafield → 'feature_card' references"
    },
    {
      "type": "paragraph",
      "content": "• After Sales Service: Uses 'after_sales_service' metafield → 'service_cards' references"
    },
    {
      "type": "paragraph",
      "content": "• How It Works: Still uses direct metafields ('hero_video' + 'manual')"
    },
    {
      "type": "header",
      "content": "Section Headings"
    },
    {
      "type": "text",
      "id": "about_heading",
      "label": "About the Product heading",
      "default": "About the Product",
      "info": "Content from 'about_the_product' metaobject"
    },
    {
      "type": "text",
      "id": "how_it_works_heading",
      "label": "How It Works heading",
      "default": "How It Works"
    },
    {
      "type": "text",
      "id": "after_sales_heading",
      "label": "After Sales Service heading",
      "default": "After Sales Service",
      "info": "Content from 'after_sales_service' metaobject"
    },
    {
      "type": "header",
      "content": "Media Type Controls"
    },
    {
      "type": "select",
      "id": "about_media_type",
      "label": "About section media type",
      "options": [
        {
          "value": "auto",
          "label": "Auto detect (recommended)"
        },
        {
          "value": "image",
          "label": "Force as images"
        },
        {
          "value": "video",
          "label": "Force as videos"
        }
      ],
      "default": "auto",
      "info": "Auto detect will use the actual file type from metaobjects"
    },
    {
      "type": "select",
      "id": "service_media_type",
      "label": "Service section media type",
      "options": [
        {
          "value": "auto",
          "label": "Auto detect (recommended)"
        },
        {
          "value": "image",
          "label": "Force as images"
        },
        {
          "value": "video",
          "label": "Force as videos"
        }
      ],
      "default": "auto",
      "info": "Auto detect will use the actual file type from metaobjects"
    },
    {
      "type": "header",
      "content": "Video Section"
    },
    {
      "type": "text",
      "id": "video_title",
      "label": "Video card title",
      "default": "How It Works"
    },
    {
      "type": "textarea",
      "id": "video_description",
      "label": "Video card description",
      "default": "Watch our step-by-step process in action"
    },
    {
      "type": "checkbox",
      "id": "hero_video_hover_only",
      "label": "Hero video - play on hover only",
      "default": true,
      "info": "When enabled, video pauses and only plays when hovered"
    },
    {
      "type": "checkbox",
      "id": "video_hover_only",
      "label": "Carousel videos - play on hover only",
      "default": true,
      "info": "When enabled, carousel videos pause and only play when hovered"
    },
    {
      "type": "header",
      "content": "Layout & Spacing"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 40,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "Section top padding",
      "default": 80
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 40,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "Section bottom padding",
      "default": 80
    },
    {
      "type": "range",
      "id": "section_inner_spacing",
      "min": 20,
      "max": 80,
      "step": 4,
      "unit": "px",
      "label": "Between sections spacing",
      "default": 40
    },
    {
      "type": "range",
      "id": "heading_spacing",
      "min": 20,
      "max": 80,
      "step": 4,
      "unit": "px",
      "label": "Heading bottom spacing",
      "default": 60
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 24,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "header",
      "content": "Colors & Design"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Section background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#111111"
    },
    {
      "type": "color",
      "id": "media_background",
      "label": "Media background",
      "default": "#1a1a1a"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Primary text",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "muted_text_color",
      "label": "Muted text",
      "default": "#999999"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "focus_color",
      "label": "Focus outline",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 8,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 20
    },
    {
      "type": "header",
      "content": "Card Content Controls"
    },
    {
      "type": "text",
      "id": "default_button_text",
      "label": "Default button text",
      "default": "Learn More"
    },
    {
      "type": "text",
      "id": "default_feature_text",
      "label": "Default feature text",
      "default": "Feature"
    },
    {
      "type": "range",
      "id": "card_width",
      "min": 280,
      "max": 400,
      "step": 8,
      "unit": "px",
      "label": "Card width",
      "default": 320
    },
    {
      "type": "range",
      "id": "card_height",
      "min": 400,
      "max": 600,
      "step": 20,
      "unit": "px",
      "label": "Card height",
      "default": 480
    },
    {
      "type": "range",
      "id": "center_card_scale",
      "min": 1.0,
      "max": 1.2,
      "step": 0.1,
      "label": "Center card scale factor",
      "default": 1.1
    },
    {
      "type": "header",
      "content": "Required Metafields & Metaobjects"
    },
    {
      "type": "paragraph",
      "content": "This component automatically pulls content from your product's metafields and metaobjects:"
    },
    {
      "type": "paragraph",
      "content": "Metafields with Metaobject Lists:"
    },
    {
      "type": "paragraph",
      "content": "• 'about_the_product' → list of 'feature_card' metaobjects"
    },
    {
      "type": "paragraph",
      "content": "• 'after_sales_service' → list of 'service_cards' metaobjects"
    },
    {
      "type": "paragraph",
      "content": "Direct Metafields:"
    },
    {
      "type": "paragraph",
      "content": "• 'hero_video' (video file) + 'manual' (PDF file)"
    },
    {
      "type": "paragraph",
      "content": "Media files can contain JPG, PNG, or MP4 files. Video detection is automatic."
    },
    {
      "type": "paragraph",
      "content": "Card and video card designs are now locked for consistency."
    }
  ],
  "presets": [
    { 
      "name": "Product Carousel",
      "category": "Product"
    }
  ]
}
{% endschema %}